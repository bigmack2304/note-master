так как реализация картинок в заметках существенно отличается от текста, кода, тегов итд, я опишу основной поток выполнения кода при добавлении, изменении картинок.

Начнем издалека. Картинки имеют намного больший вес чем текст, оэтому их обработка отличаются.
и премерная схема кодового взаимодействия тут такая.

-----------------------------------------------------------------------------------------------------------------
 схема выходит примерно такая...            

    ui <---> redux(store) -> db functions -> db
     ^                                         |
     |                                     is update, new Event
     ----------------- hook <------------------|

-----------------------------------------------------------------------------------------------------------------
теперь более подробнее:


ui                  - компоненты react, визуализация и обработка действий юзера
redux(store)        - при совершении какихто действий в ui, срабатывают редьюсеры redux, они вызывают db functions которые в 
                      свою очередь обновляют данные в db, после чего редьюсеры redux получают новые данные и обновляют состояния
                      своих слайсов
hook                - кастомные хуки которые подписаны на изменение db, они вызывают перерисовку интерфейса, для того чтобы отобразить
                      изображение которое лежит в db, либо обновить ссылку в компонентах react, на ту что изменилась в db

- создается компонент картинки в заметке, пока он пустой, на этом этапе у него есть базовые настройки (в том числе value и fileName) и уникальный ID

- мы можем выбрать как отобразить картинку, либо загрузить локальный фаил, либо указать url картинки из интернета.
  - если мы подгружаем локальный фаил то извлекается его имя и сохраняется в fileName, value становится равным своемуже ID, 
    а сама картинка кодируется в base64 и сохраняется в indexed db
  - если мы подгружаеем картинку из интернета то у нас есть только url, fileName равен пустой строке. value становится равным своемуже ID
    а url сохраняется в indexed db

        тоесть, уже можно выделить некий паттерн, если value != "" то компонент картинки имеет картинку,
        если fileName есть то картинка закодирована в base64 и лежит в db, если fileName = "" то источником будет адрес из интернета

        также отмечу что что в db хранится только закодированное изображение либо ссылка на него, все остальное (данные компонента) также лежат в другой области db
        но также еще и дублируются в redux(store) и могут передаватся через компоненты

        кроме этого, в db все данные лежат по ключам, отдельно друг от друга, ключом к картинке является value компонента картинки, которое равно его ID
    


- любые действия в предыдущих пунктах также изменяют еще и redux(store)

- далее происходит запись в indexed db

- на любые изменения данных в indexed db подписаны кастомные хуки, которые используются в компонентах react для получения ссылки на изображение
    Внутри хука также есть логика. Там проверяется, если в db лежит url то он просто возвращается, но если там картинка, то генерируется специальный обьект
    и возвращается ссылка на него ввиде строки. Этот обьект автоматически будет удалятся при размонтировании компонента.    

- таким образом действия юзера в ui вызывают редюсеров, а те в свою очередь вызывают изменение в db, после чего обновляется еще и стор. + хуки также вызывают 
  ререндер. В результате пользователь видит изменения.



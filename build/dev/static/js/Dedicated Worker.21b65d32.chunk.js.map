{"version":3,"file":"static/js/Dedicated Worker.21b65d32.chunk.js","mappings":"yCAwEA,SAASA,EAAeC,GACpB,MAAqB,kBAAVA,IACL,mBAAoBA,IACpB,oBAAqBA,IACrB,cAAeA,IACf,SAAUA,MACXC,MAAMC,QAAQF,EAAMG,mBACpBF,MAAMC,QAAQF,EAAMI,qBAE7B,C,oBChFIC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXR,EAAoBU,EAAEF,EAAYC,KAAST,EAAoBU,EAAEN,EAASK,IAC5EE,OAAOC,eAAeR,EAASK,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDT,EAAoBU,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,G,oBCkBlF,SAASI,IAAoD,IAAjCC,EAAOC,UAAAC,OAAA,QAAApB,IAAAmB,UAAA,GAAAA,UAAA,GAAG,GAAIE,EAASF,UAAAC,OAAA,QAAApB,IAAAmB,UAAA,GAAAA,UAAA,GAAG,KAElDG,KAAKC,YAAY,CACbL,QAASA,EACTG,UAAWA,GAEnB,CAjBAC,KAAKE,UAAaC,IACd,MAAMC,EAAOD,EAAEC,KAEXA,IAAQpC,EAAAA,EAAAA,IAAeoC,IAmB/B,SAAyBC,GAAmF,IAAlF,eAAEjC,EAAiB,GAAE,gBAAEC,EAAkB,GAAE,UAAEiC,EAAY,IAAsBD,EACjGC,IACAX,EAAmB,6BAQ3B,SAAoBvB,EAA0BC,EAAwBiC,GAClE,IACI,MAAMC,EAAO,IAAIC,YAAYpC,EAAgBkC,GAE7CX,EAAmB,6BADJY,KAAQlC,GAE3B,CAAE,MAAO8B,GACLR,EAAmB,2BACnBc,QAAQC,MAAMP,EAClB,CACJ,CAhBQQ,CAAWvC,EAAgBC,EAAiBiC,GAEpD,CAvBQM,CAAiBR,EACrB,C","sources":["0-shared/utils/typeHelpers.ts","../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","0-shared/dedicatedWorker/dedicatedWorker.ts"],"sourcesContent":["import { ForwardRefRenderFunction } from \"react\";\nimport type { IDataTreeNote, IDataTreeFolder, TNoteBody, IDataSave } from \"0-shared/types/dataSave\";\nimport type { TMessageDataType } from \"0-shared/dedicatedWorker/workerTypes\";\n\n/**\n *  убирает своиство readonly у полей массива или обьекта\n */\ntype RemoveReadonly<T> = {\n    -readonly [P in keyof T]: T[P];\n};\n\n/**\n * вычисляет пропсы компонента\n * @tparam T - тип компонента\n */\ntype GetProps<T> = T extends React.ComponentType<infer Props> ? Props : unknown;\n\n/**\n * типизирует параметр ref в компоненте, если используется forwardRef\n * @tparam T - тип элемента на который перенаправляется ref (например HTMLInputElement)\n */\ntype Ref<T> = Parameters<ForwardRefRenderFunction<T>>[1];\n\n/**\n * проверяет чтобы сущьность пренадлежала к типу IDataTreeNote\n * @param node\n * @returns boolean\n */\nfunction isDataTreeNote(node: any): node is IDataTreeNote {\n    if (typeof node !== \"object\") return false;\n    if (!(\"type\" in node)) return false;\n    return node.type === \"note\";\n}\n\n/**\n * проверяет чтобы сущьность пренадлежала к типу IDataTreeFolder\n * @param node\n * @returns boolean\n */\nfunction isDataTreeFolder(node: any): node is IDataTreeFolder {\n    if (typeof node !== \"object\") return false;\n    if (!(\"type\" in node)) return false;\n    return node.type === \"folder\";\n}\n\n/**\n * проверяет чтобы сущьность пренадлежала к типу TNoteBody\n * @param node\n * @returns boolean\n */\nfunction isDataNoteBody(node: any): node is TNoteBody {\n    if (typeof node !== \"object\") return false;\n    if (!(\"type\" in node)) return false;\n    return node.type === \"component\";\n}\n\n/**\n * проверяет чтобы сущьность пренадлежала к типу IDataSave\n * @param node\n * @returns boolean\n */\nfunction isDataSave(node: any): node is IDataSave {\n    if (typeof node !== \"object\") return false;\n    if (!(\"db_type\" in node)) return false;\n    if (!(\"data_tree\" in node)) return false;\n    if (!(\"global_tags\" in node)) return false;\n    return true;\n}\n\n/**\n * проверяет чтобы сущьность пренадлежала к типу TMessageDataType dedicated воркера\n */\nfunction isFunctionData(value: any): value is TMessageDataType {\n    if (typeof value !== \"object\") return false;\n    if (!(\"argument_names\" in value)) return false;\n    if (!(\"argument_values\" in value)) return false;\n    if (!(\"func_data\" in value)) return false;\n    if (!(\"type\" in value)) return false;\n    if (!Array.isArray(value.argument_names)) return false;\n    if (!Array.isArray(value.argument_values)) return false;\n    return true;\n}\n\nexport { isDataTreeNote, isDataTreeFolder, isDataNoteBody, isDataSave, isFunctionData };\nexport type { GetProps, Ref, RemoveReadonly };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type { TMessageDataType } from \"./workerTypes\";\nimport { isFunctionData } from \"0-shared/utils/typeHelpers\";\n\n/**\n * получение данных\n */\n//eslint-disable-next-line\nself.onmessage = (e: MessageEvent) => {\n    const data = e.data;\n    // данные с функцией и параметрами для ее выполнения\n    if (data && isFunctionData(data)) {\n        funcExecutorCase(data);\n    }\n};\n\n/**\n * отправка данных в рантайм\n */\nfunction worker_postMessage(resolve = \"\", work_data = null) {\n    //eslint-disable-next-line\n    self.postMessage({\n        resolve: resolve,\n        work_data: work_data,\n    });\n}\n\n/**\n * кейс с выполнением функции\n */\nfunction funcExecutorCase({ argument_names = [], argument_values = [], func_data = \"\" }: TMessageDataType) {\n    if (func_data) {\n        worker_postMessage(\"Function executor started\");\n        func_runer(argument_names, argument_values, func_data);\n    }\n}\n\n/**\n * создание и выполнение полученной функции\n */\nfunction func_runer(argument_names: string[], argument_values: any[], func_data: string) {\n    try {\n        const func = new Function(...argument_names, func_data);\n        const result = func(...argument_values);\n        worker_postMessage(\"Function executor finished\", result);\n    } catch (e) {\n        worker_postMessage(\"Function executor error\");\n        console.error(e);\n    }\n}\n"],"names":["isFunctionData","value","Array","isArray","argument_names","argument_values","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","worker_postMessage","resolve","arguments","length","work_data","self","postMessage","onmessage","e","data","_ref","func_data","func","Function","console","error","func_runer","funcExecutorCase"],"sourceRoot":""}